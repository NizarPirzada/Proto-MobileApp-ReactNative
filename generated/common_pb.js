/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.AppAction', null, global);
goog.exportSymbol('proto.proto.AppAction.Type', null, global);
goog.exportSymbol('proto.proto.AppEvent', null, global);
goog.exportSymbol('proto.proto.AppResp', null, global);
goog.exportSymbol('proto.proto.BalanceUpdate', null, global);
goog.exportSymbol('proto.proto.CallEvent', null, global);
goog.exportSymbol('proto.proto.CallEvent.Type', null, global);
goog.exportSymbol('proto.proto.CallSuggestion', null, global);
goog.exportSymbol('proto.proto.Charge', null, global);
goog.exportSymbol('proto.proto.ChatEvent', null, global);
goog.exportSymbol('proto.proto.ChatEvent.Type', null, global);
goog.exportSymbol('proto.proto.ChatMessage', null, global);
goog.exportSymbol('proto.proto.ChatMessage.Type', null, global);
goog.exportSymbol('proto.proto.EventState', null, global);
goog.exportSymbol('proto.proto.EventState.Enum', null, global);
goog.exportSymbol('proto.proto.Notification', null, global);
goog.exportSymbol('proto.proto.Notification.NewEventInvite', null, global);
goog.exportSymbol('proto.proto.NotificationType', null, global);
goog.exportSymbol('proto.proto.PostSuggestion', null, global);
goog.exportSymbol('proto.proto.PostType', null, global);
goog.exportSymbol('proto.proto.PrivacyOpt', null, global);
goog.exportSymbol('proto.proto.RoomEvent', null, global);
goog.exportSymbol('proto.proto.RoomEvent.Type', null, global);
goog.exportSymbol('proto.proto.RoomInfo', null, global);
goog.exportSymbol('proto.proto.RoomKey', null, global);
goog.exportSymbol('proto.proto.RoomMessage', null, global);
goog.exportSymbol('proto.proto.TxEnum', null, global);
goog.exportSymbol('proto.proto.TxEnum.Reason', null, global);
goog.exportSymbol('proto.proto.TxEnum.Status', null, global);
goog.exportSymbol('proto.proto.UserLogo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UserLogo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UserLogo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.UserLogo.displayName = 'proto.proto.UserLogo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UserLogo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UserLogo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UserLogo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserLogo.toObject = function(includeInstance, msg) {
  var f, obj = {
    handle: jspb.Message.getFieldWithDefault(msg, 1, ""),
    picture: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UserLogo}
 */
proto.proto.UserLogo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UserLogo;
  return proto.proto.UserLogo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UserLogo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UserLogo}
 */
proto.proto.UserLogo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UserLogo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UserLogo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UserLogo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserLogo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPicture();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string handle = 1;
 * @return {string}
 */
proto.proto.UserLogo.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.UserLogo.prototype.setHandle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string picture = 2;
 * @return {string}
 */
proto.proto.UserLogo.prototype.getPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.UserLogo.prototype.setPicture = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AppAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.AppAction.oneofGroups_);
};
goog.inherits(proto.proto.AppAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AppAction.displayName = 'proto.proto.AppAction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.AppAction.oneofGroups_ = [[10,12]];

/**
 * @enum {number}
 */
proto.proto.AppAction.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CHAT_EVENT: 10,
  ROOM_EVENT: 12
};

/**
 * @return {proto.proto.AppAction.PayloadCase}
 */
proto.proto.AppAction.prototype.getPayloadCase = function() {
  return /** @type {proto.proto.AppAction.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.proto.AppAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AppAction.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AppAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AppAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chatEvent: (f = msg.getChatEvent()) && proto.proto.ChatEvent.toObject(includeInstance, f),
    roomEvent: (f = msg.getRoomEvent()) && proto.proto.RoomEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AppAction}
 */
proto.proto.AppAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AppAction;
  return proto.proto.AppAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AppAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AppAction}
 */
proto.proto.AppAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.AppAction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 10:
      var value = new proto.proto.ChatEvent;
      reader.readMessage(value,proto.proto.ChatEvent.deserializeBinaryFromReader);
      msg.setChatEvent(value);
      break;
    case 12:
      var value = new proto.proto.RoomEvent;
      reader.readMessage(value,proto.proto.RoomEvent.deserializeBinaryFromReader);
      msg.setRoomEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AppAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AppAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AppAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActionId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChatEvent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.ChatEvent.serializeBinaryToWriter
    );
  }
  f = message.getRoomEvent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.RoomEvent.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.AppAction.Type = {
  NONE: 0,
  CHAT_ENTER: 1,
  CHAT_LEAVE: 2,
  CHAT_EVENT: 3,
  ROOM_SUBSCRIBE: 10,
  ROOM_UNSUBSCRIBE: 11,
  ROOM_EVENT: 12,
  APP_HEARTBEAT: 13
};

/**
 * optional Type type = 1;
 * @return {!proto.proto.AppAction.Type}
 */
proto.proto.AppAction.prototype.getType = function() {
  return /** @type {!proto.proto.AppAction.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.AppAction.Type} value */
proto.proto.AppAction.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 action_id = 2;
 * @return {number}
 */
proto.proto.AppAction.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.AppAction.prototype.setActionId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 id = 3;
 * @return {number}
 */
proto.proto.AppAction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AppAction.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ChatEvent chat_event = 10;
 * @return {?proto.proto.ChatEvent}
 */
proto.proto.AppAction.prototype.getChatEvent = function() {
  return /** @type{?proto.proto.ChatEvent} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChatEvent, 10));
};


/** @param {?proto.proto.ChatEvent|undefined} value */
proto.proto.AppAction.prototype.setChatEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.proto.AppAction.oneofGroups_[0], value);
};


proto.proto.AppAction.prototype.clearChatEvent = function() {
  this.setChatEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppAction.prototype.hasChatEvent = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RoomEvent room_event = 12;
 * @return {?proto.proto.RoomEvent}
 */
proto.proto.AppAction.prototype.getRoomEvent = function() {
  return /** @type{?proto.proto.RoomEvent} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomEvent, 12));
};


/** @param {?proto.proto.RoomEvent|undefined} value */
proto.proto.AppAction.prototype.setRoomEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.proto.AppAction.oneofGroups_[0], value);
};


proto.proto.AppAction.prototype.clearRoomEvent = function() {
  this.setRoomEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppAction.prototype.hasRoomEvent = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AppResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AppResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AppResp.displayName = 'proto.proto.AppResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AppResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AppResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AppResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ok: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AppResp}
 */
proto.proto.AppResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AppResp;
  return proto.proto.AppResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AppResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AppResp}
 */
proto.proto.AppResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AppResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AppResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AppResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOk();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int64 action_id = 2;
 * @return {number}
 */
proto.proto.AppResp.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.AppResp.prototype.setActionId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 error_code = 3;
 * @return {number}
 */
proto.proto.AppResp.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AppResp.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool ok = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AppResp.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.AppResp.prototype.setOk = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AppEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.AppEvent.oneofGroups_);
};
goog.inherits(proto.proto.AppEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AppEvent.displayName = 'proto.proto.AppEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.AppEvent.oneofGroups_ = [[11,12,13,17,14,15,16]];

/**
 * @enum {number}
 */
proto.proto.AppEvent.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CALL_EVENT: 11,
  NOTIFICATION: 12,
  BALANCE_UPDATE: 13,
  POST_SUGGEST: 17,
  CALL_SUGGEST: 14,
  ROOM_EVENT: 15,
  CHAT_EVENT: 16
};

/**
 * @return {proto.proto.AppEvent.PayloadCase}
 */
proto.proto.AppEvent.prototype.getPayloadCase = function() {
  return /** @type {proto.proto.AppEvent.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.proto.AppEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AppEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AppEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AppEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ok: jspb.Message.getFieldWithDefault(msg, 4, false),
    callEvent: (f = msg.getCallEvent()) && proto.proto.CallEvent.toObject(includeInstance, f),
    notification: (f = msg.getNotification()) && proto.proto.Notification.toObject(includeInstance, f),
    balanceUpdate: (f = msg.getBalanceUpdate()) && proto.proto.BalanceUpdate.toObject(includeInstance, f),
    postSuggest: (f = msg.getPostSuggest()) && proto.proto.PostSuggestion.toObject(includeInstance, f),
    callSuggest: (f = msg.getCallSuggest()) && proto.proto.CallSuggestion.toObject(includeInstance, f),
    roomEvent: (f = msg.getRoomEvent()) && proto.proto.RoomEvent.toObject(includeInstance, f),
    chatEvent: (f = msg.getChatEvent()) && proto.proto.ChatEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AppEvent}
 */
proto.proto.AppEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AppEvent;
  return proto.proto.AppEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AppEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AppEvent}
 */
proto.proto.AppEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 11:
      var value = new proto.proto.CallEvent;
      reader.readMessage(value,proto.proto.CallEvent.deserializeBinaryFromReader);
      msg.setCallEvent(value);
      break;
    case 12:
      var value = new proto.proto.Notification;
      reader.readMessage(value,proto.proto.Notification.deserializeBinaryFromReader);
      msg.setNotification(value);
      break;
    case 13:
      var value = new proto.proto.BalanceUpdate;
      reader.readMessage(value,proto.proto.BalanceUpdate.deserializeBinaryFromReader);
      msg.setBalanceUpdate(value);
      break;
    case 17:
      var value = new proto.proto.PostSuggestion;
      reader.readMessage(value,proto.proto.PostSuggestion.deserializeBinaryFromReader);
      msg.setPostSuggest(value);
      break;
    case 14:
      var value = new proto.proto.CallSuggestion;
      reader.readMessage(value,proto.proto.CallSuggestion.deserializeBinaryFromReader);
      msg.setCallSuggest(value);
      break;
    case 15:
      var value = new proto.proto.RoomEvent;
      reader.readMessage(value,proto.proto.RoomEvent.deserializeBinaryFromReader);
      msg.setRoomEvent(value);
      break;
    case 16:
      var value = new proto.proto.ChatEvent;
      reader.readMessage(value,proto.proto.ChatEvent.deserializeBinaryFromReader);
      msg.setChatEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AppEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AppEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AppEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AppEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOk();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCallEvent();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.CallEvent.serializeBinaryToWriter
    );
  }
  f = message.getNotification();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.Notification.serializeBinaryToWriter
    );
  }
  f = message.getBalanceUpdate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.BalanceUpdate.serializeBinaryToWriter
    );
  }
  f = message.getPostSuggest();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.proto.PostSuggestion.serializeBinaryToWriter
    );
  }
  f = message.getCallSuggest();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.CallSuggestion.serializeBinaryToWriter
    );
  }
  f = message.getRoomEvent();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.proto.RoomEvent.serializeBinaryToWriter
    );
  }
  f = message.getChatEvent();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.ChatEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 action_id = 2;
 * @return {number}
 */
proto.proto.AppEvent.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.AppEvent.prototype.setActionId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 error_code = 3;
 * @return {number}
 */
proto.proto.AppEvent.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AppEvent.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool ok = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AppEvent.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.AppEvent.prototype.setOk = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional CallEvent call_event = 11;
 * @return {?proto.proto.CallEvent}
 */
proto.proto.AppEvent.prototype.getCallEvent = function() {
  return /** @type{?proto.proto.CallEvent} */ (
    jspb.Message.getWrapperField(this, proto.proto.CallEvent, 11));
};


/** @param {?proto.proto.CallEvent|undefined} value */
proto.proto.AppEvent.prototype.setCallEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearCallEvent = function() {
  this.setCallEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasCallEvent = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Notification notification = 12;
 * @return {?proto.proto.Notification}
 */
proto.proto.AppEvent.prototype.getNotification = function() {
  return /** @type{?proto.proto.Notification} */ (
    jspb.Message.getWrapperField(this, proto.proto.Notification, 12));
};


/** @param {?proto.proto.Notification|undefined} value */
proto.proto.AppEvent.prototype.setNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearNotification = function() {
  this.setNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasNotification = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional BalanceUpdate balance_update = 13;
 * @return {?proto.proto.BalanceUpdate}
 */
proto.proto.AppEvent.prototype.getBalanceUpdate = function() {
  return /** @type{?proto.proto.BalanceUpdate} */ (
    jspb.Message.getWrapperField(this, proto.proto.BalanceUpdate, 13));
};


/** @param {?proto.proto.BalanceUpdate|undefined} value */
proto.proto.AppEvent.prototype.setBalanceUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearBalanceUpdate = function() {
  this.setBalanceUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasBalanceUpdate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional PostSuggestion post_suggest = 17;
 * @return {?proto.proto.PostSuggestion}
 */
proto.proto.AppEvent.prototype.getPostSuggest = function() {
  return /** @type{?proto.proto.PostSuggestion} */ (
    jspb.Message.getWrapperField(this, proto.proto.PostSuggestion, 17));
};


/** @param {?proto.proto.PostSuggestion|undefined} value */
proto.proto.AppEvent.prototype.setPostSuggest = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearPostSuggest = function() {
  this.setPostSuggest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasPostSuggest = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CallSuggestion call_suggest = 14;
 * @return {?proto.proto.CallSuggestion}
 */
proto.proto.AppEvent.prototype.getCallSuggest = function() {
  return /** @type{?proto.proto.CallSuggestion} */ (
    jspb.Message.getWrapperField(this, proto.proto.CallSuggestion, 14));
};


/** @param {?proto.proto.CallSuggestion|undefined} value */
proto.proto.AppEvent.prototype.setCallSuggest = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearCallSuggest = function() {
  this.setCallSuggest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasCallSuggest = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RoomEvent room_event = 15;
 * @return {?proto.proto.RoomEvent}
 */
proto.proto.AppEvent.prototype.getRoomEvent = function() {
  return /** @type{?proto.proto.RoomEvent} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomEvent, 15));
};


/** @param {?proto.proto.RoomEvent|undefined} value */
proto.proto.AppEvent.prototype.setRoomEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearRoomEvent = function() {
  this.setRoomEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasRoomEvent = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ChatEvent chat_event = 16;
 * @return {?proto.proto.ChatEvent}
 */
proto.proto.AppEvent.prototype.getChatEvent = function() {
  return /** @type{?proto.proto.ChatEvent} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChatEvent, 16));
};


/** @param {?proto.proto.ChatEvent|undefined} value */
proto.proto.AppEvent.prototype.setChatEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.proto.AppEvent.oneofGroups_[0], value);
};


proto.proto.AppEvent.prototype.clearChatEvent = function() {
  this.setChatEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AppEvent.prototype.hasChatEvent = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CallEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CallEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CallEvent.displayName = 'proto.proto.CallEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CallEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CallEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CallEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CallEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    callId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    anonymous: jspb.Message.getFieldWithDefault(msg, 4, false),
    data: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CallEvent}
 */
proto.proto.CallEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CallEvent;
  return proto.proto.CallEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CallEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CallEvent}
 */
proto.proto.CallEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.CallEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnonymous(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CallEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CallEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CallEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CallEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCallId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CallEvent.Type = {
  NONE: 0,
  INCOMING: 1,
  NOT_ANSWERED: 2,
  DECLINED: 3,
  FAILED: 6,
  CANCELLED: 7
};

/**
 * optional Type type = 1;
 * @return {!proto.proto.CallEvent.Type}
 */
proto.proto.CallEvent.prototype.getType = function() {
  return /** @type {!proto.proto.CallEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.CallEvent.Type} value */
proto.proto.CallEvent.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 call_id = 2;
 * @return {number}
 */
proto.proto.CallEvent.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CallEvent.prototype.setCallId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 user_id = 3;
 * @return {number}
 */
proto.proto.CallEvent.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CallEvent.prototype.setUserId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool anonymous = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CallEvent.prototype.getAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.CallEvent.prototype.setAnonymous = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string data = 5;
 * @return {string}
 */
proto.proto.CallEvent.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.CallEvent.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.BalanceUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.BalanceUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.BalanceUpdate.displayName = 'proto.proto.BalanceUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.BalanceUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.BalanceUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.BalanceUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BalanceUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.BalanceUpdate}
 */
proto.proto.BalanceUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.BalanceUpdate;
  return proto.proto.BalanceUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.BalanceUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.BalanceUpdate}
 */
proto.proto.BalanceUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.BalanceUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.BalanceUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.BalanceUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BalanceUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Notification.displayName = 'proto.proto.Notification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    relatedid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    data: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Notification}
 */
proto.proto.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Notification;
  return proto.proto.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Notification}
 */
proto.proto.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.NotificationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRelatedid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRelatedid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Notification.NewEventInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Notification.NewEventInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Notification.NewEventInvite.displayName = 'proto.proto.Notification.NewEventInvite';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Notification.NewEventInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Notification.NewEventInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Notification.NewEventInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Notification.NewEventInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.proto.UserLogo.toObject(includeInstance, f),
    planName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    goalEvent: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Notification.NewEventInvite}
 */
proto.proto.Notification.NewEventInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Notification.NewEventInvite;
  return proto.proto.Notification.NewEventInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Notification.NewEventInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Notification.NewEventInvite}
 */
proto.proto.Notification.NewEventInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.UserLogo;
      reader.readMessage(value,proto.proto.UserLogo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGoalEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Notification.NewEventInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Notification.NewEventInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Notification.NewEventInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Notification.NewEventInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.UserLogo.serializeBinaryToWriter
    );
  }
  f = message.getPlanName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGoalEvent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional UserLogo user = 1;
 * @return {?proto.proto.UserLogo}
 */
proto.proto.Notification.NewEventInvite.prototype.getUser = function() {
  return /** @type{?proto.proto.UserLogo} */ (
    jspb.Message.getWrapperField(this, proto.proto.UserLogo, 1));
};


/** @param {?proto.proto.UserLogo|undefined} value */
proto.proto.Notification.NewEventInvite.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.Notification.NewEventInvite.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Notification.NewEventInvite.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plan_name = 2;
 * @return {string}
 */
proto.proto.Notification.NewEventInvite.prototype.getPlanName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Notification.NewEventInvite.prototype.setPlanName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool goal_event = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.Notification.NewEventInvite.prototype.getGoalEvent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.Notification.NewEventInvite.prototype.setGoalEvent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.proto.Notification.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.Notification.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NotificationType type = 2;
 * @return {!proto.proto.NotificationType}
 */
proto.proto.Notification.prototype.getType = function() {
  return /** @type {!proto.proto.NotificationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.NotificationType} value */
proto.proto.Notification.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 relatedId = 3;
 * @return {number}
 */
proto.proto.Notification.prototype.getRelatedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.Notification.prototype.setRelatedid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.proto.Notification.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.Notification.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string data = 5;
 * @return {string}
 */
proto.proto.Notification.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.Notification.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CallSuggestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CallSuggestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CallSuggestion.displayName = 'proto.proto.CallSuggestion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CallSuggestion.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CallSuggestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CallSuggestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CallSuggestion.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CallSuggestion}
 */
proto.proto.CallSuggestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CallSuggestion;
  return proto.proto.CallSuggestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CallSuggestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CallSuggestion}
 */
proto.proto.CallSuggestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CallSuggestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CallSuggestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CallSuggestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CallSuggestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PostSuggestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PostSuggestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PostSuggestion.displayName = 'proto.proto.PostSuggestion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PostSuggestion.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PostSuggestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PostSuggestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PostSuggestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    postId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PostSuggestion}
 */
proto.proto.PostSuggestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PostSuggestion;
  return proto.proto.PostSuggestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PostSuggestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PostSuggestion}
 */
proto.proto.PostSuggestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPostId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PostSuggestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PostSuggestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PostSuggestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PostSuggestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 post_id = 1;
 * @return {number}
 */
proto.proto.PostSuggestion.prototype.getPostId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.PostSuggestion.prototype.setPostId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.proto.PostSuggestion.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PostSuggestion.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.displayName = 'proto.proto.RoomMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sentTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    anonymous: jspb.Message.getFieldWithDefault(msg, 4, false),
    logo: (f = msg.getLogo()) && proto.proto.UserLogo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage;
  return proto.proto.RoomMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSentTs(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnonymous(value);
      break;
    case 5:
      var value = new proto.proto.UserLogo;
      reader.readMessage(value,proto.proto.UserLogo.deserializeBinaryFromReader);
      msg.setLogo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSentTs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLogo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.UserLogo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 member_id = 1;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setMemberId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.proto.RoomMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sent_ts = 3;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getSentTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setSentTs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool anonymous = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RoomMessage.prototype.getAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.RoomMessage.prototype.setAnonymous = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional UserLogo logo = 5;
 * @return {?proto.proto.UserLogo}
 */
proto.proto.RoomMessage.prototype.getLogo = function() {
  return /** @type{?proto.proto.UserLogo} */ (
    jspb.Message.getWrapperField(this, proto.proto.UserLogo, 5));
};


/** @param {?proto.proto.UserLogo|undefined} value */
proto.proto.RoomMessage.prototype.setLogo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.proto.RoomMessage.prototype.clearLogo = function() {
  this.setLogo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasLogo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomKey.displayName = 'proto.proto.RoomKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomKey.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memberid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sharerid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    anonymous: jspb.Message.getFieldWithDefault(msg, 4, false),
    token: jspb.Message.getFieldWithDefault(msg, 5, ""),
    url: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomKey}
 */
proto.proto.RoomKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomKey;
  return proto.proto.RoomKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomKey}
 */
proto.proto.RoomKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemberid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSharerid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnonymous(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMemberid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSharerid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 roomId = 1;
 * @return {number}
 */
proto.proto.RoomKey.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomKey.prototype.setRoomid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 memberId = 2;
 * @return {number}
 */
proto.proto.RoomKey.prototype.getMemberid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RoomKey.prototype.setMemberid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 sharerId = 3;
 * @return {number}
 */
proto.proto.RoomKey.prototype.getSharerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.RoomKey.prototype.setSharerid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool anonymous = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RoomKey.prototype.getAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.RoomKey.prototype.setAnonymous = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string token = 5;
 * @return {string}
 */
proto.proto.RoomKey.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.RoomKey.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.proto.RoomKey.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.RoomKey.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.proto.RoomKey.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.RoomKey.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomInfo.displayName = 'proto.proto.RoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomInfo}
 */
proto.proto.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomInfo;
  return proto.proto.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomInfo}
 */
proto.proto.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.proto.RoomInfo.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.RoomInfo.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.proto.RoomInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RoomInfo.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.RoomEvent.oneofGroups_);
};
goog.inherits(proto.proto.RoomEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomEvent.displayName = 'proto.proto.RoomEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.RoomEvent.oneofGroups_ = [[10,13,12]];

/**
 * @enum {number}
 */
proto.proto.RoomEvent.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  MESSAGE: 10,
  INFO: 13,
  KEY: 12
};

/**
 * @return {proto.proto.RoomEvent.PayloadCase}
 */
proto.proto.RoomEvent.prototype.getPayloadCase = function() {
  return /** @type {proto.proto.RoomEvent.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.proto.RoomEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: (f = msg.getMessage()) && proto.proto.RoomMessage.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.proto.RoomInfo.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.proto.RoomKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomEvent}
 */
proto.proto.RoomEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomEvent;
  return proto.proto.RoomEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomEvent}
 */
proto.proto.RoomEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.RoomEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 10:
      var value = new proto.proto.RoomMessage;
      reader.readMessage(value,proto.proto.RoomMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 13:
      var value = new proto.proto.RoomInfo;
      reader.readMessage(value,proto.proto.RoomInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 12:
      var value = new proto.proto.RoomKey;
      reader.readMessage(value,proto.proto.RoomKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.RoomMessage.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.RoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.RoomKey.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.RoomEvent.Type = {
  NONE: 0,
  KICKED: 1,
  DESTROYED: 2,
  MESSAGE: 3,
  ALLOCATED: 4,
  SUBSCRIBED: 5
};

/**
 * optional Type type = 1;
 * @return {!proto.proto.RoomEvent.Type}
 */
proto.proto.RoomEvent.prototype.getType = function() {
  return /** @type {!proto.proto.RoomEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.RoomEvent.Type} value */
proto.proto.RoomEvent.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 room_id = 2;
 * @return {number}
 */
proto.proto.RoomEvent.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RoomEvent.prototype.setRoomId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 user_id = 3;
 * @return {number}
 */
proto.proto.RoomEvent.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.RoomEvent.prototype.setUserId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional RoomMessage message = 10;
 * @return {?proto.proto.RoomMessage}
 */
proto.proto.RoomEvent.prototype.getMessage = function() {
  return /** @type{?proto.proto.RoomMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage, 10));
};


/** @param {?proto.proto.RoomMessage|undefined} value */
proto.proto.RoomEvent.prototype.setMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.proto.RoomEvent.oneofGroups_[0], value);
};


proto.proto.RoomEvent.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomEvent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RoomInfo info = 13;
 * @return {?proto.proto.RoomInfo}
 */
proto.proto.RoomEvent.prototype.getInfo = function() {
  return /** @type{?proto.proto.RoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomInfo, 13));
};


/** @param {?proto.proto.RoomInfo|undefined} value */
proto.proto.RoomEvent.prototype.setInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.proto.RoomEvent.oneofGroups_[0], value);
};


proto.proto.RoomEvent.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomEvent.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RoomKey key = 12;
 * @return {?proto.proto.RoomKey}
 */
proto.proto.RoomEvent.prototype.getKey = function() {
  return /** @type{?proto.proto.RoomKey} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomKey, 12));
};


/** @param {?proto.proto.RoomKey|undefined} value */
proto.proto.RoomEvent.prototype.setKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.proto.RoomEvent.oneofGroups_[0], value);
};


proto.proto.RoomEvent.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChatEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.ChatEvent.oneofGroups_);
};
goog.inherits(proto.proto.ChatEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChatEvent.displayName = 'proto.proto.ChatEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.ChatEvent.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.proto.ChatEvent.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  MESSAGE: 10
};

/**
 * @return {proto.proto.ChatEvent.PayloadCase}
 */
proto.proto.ChatEvent.prototype.getPayloadCase = function() {
  return /** @type {proto.proto.ChatEvent.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.proto.ChatEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChatEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChatEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChatEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    messageId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fromUser: jspb.Message.getFieldWithDefault(msg, 6, false),
    message: (f = msg.getMessage()) && proto.proto.ChatMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChatEvent}
 */
proto.proto.ChatEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChatEvent;
  return proto.proto.ChatEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChatEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChatEvent}
 */
proto.proto.ChatEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ChatEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromUser(value);
      break;
    case 10:
      var value = new proto.proto.ChatMessage;
      reader.readMessage(value,proto.proto.ChatMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChatEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChatEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChatEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSenderId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFromUser();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ChatEvent.Type = {
  NONE: 0,
  MESSAGE: 1,
  TYPING: 2,
  STOP_TYPING: 5,
  READ: 3,
  DELIVERED: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.proto.ChatEvent.Type}
 */
proto.proto.ChatEvent.prototype.getType = function() {
  return /** @type {!proto.proto.ChatEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.ChatEvent.Type} value */
proto.proto.ChatEvent.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 channel_id = 2;
 * @return {number}
 */
proto.proto.ChatEvent.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.ChatEvent.prototype.setChannelId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.proto.ChatEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.ChatEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 sender_id = 4;
 * @return {number}
 */
proto.proto.ChatEvent.prototype.getSenderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.ChatEvent.prototype.setSenderId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 message_id = 5;
 * @return {number}
 */
proto.proto.ChatEvent.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.ChatEvent.prototype.setMessageId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool from_user = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.ChatEvent.prototype.getFromUser = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.ChatEvent.prototype.setFromUser = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional ChatMessage message = 10;
 * @return {?proto.proto.ChatMessage}
 */
proto.proto.ChatEvent.prototype.getMessage = function() {
  return /** @type{?proto.proto.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChatMessage, 10));
};


/** @param {?proto.proto.ChatMessage|undefined} value */
proto.proto.ChatEvent.prototype.setMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.proto.ChatEvent.oneofGroups_[0], value);
};


proto.proto.ChatEvent.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChatEvent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChatMessage.displayName = 'proto.proto.ChatMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    replyId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    memberId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    anonymous: jspb.Message.getFieldWithDefault(msg, 7, false),
    logo: (f = msg.getLogo()) && proto.proto.UserLogo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChatMessage}
 */
proto.proto.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChatMessage;
  return proto.proto.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChatMessage}
 */
proto.proto.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ChatMessage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemberId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnonymous(value);
      break;
    case 8:
      var value = new proto.proto.UserLogo;
      reader.readMessage(value,proto.proto.UserLogo.deserializeBinaryFromReader);
      msg.setLogo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReplyId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLogo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.UserLogo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ChatMessage.Type = {
  NONE: 0,
  TEXT: 1,
  MEMBER_JOIN: 2,
  MEMBER_LEFT: 3,
  CHANNEL_CREATED: 4,
  CHANNEL_DESTROYED: 5,
  CHANNEL_ARCHIVED: 6
};

/**
 * optional Type type = 1;
 * @return {!proto.proto.ChatMessage.Type}
 */
proto.proto.ChatMessage.prototype.getType = function() {
  return /** @type {!proto.proto.ChatMessage.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.ChatMessage.Type} value */
proto.proto.ChatMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.proto.ChatMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ChatMessage.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 reply_id = 5;
 * @return {number}
 */
proto.proto.ChatMessage.prototype.getReplyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.ChatMessage.prototype.setReplyId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 member_id = 6;
 * @return {number}
 */
proto.proto.ChatMessage.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.ChatMessage.prototype.setMemberId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool anonymous = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.ChatMessage.prototype.getAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.ChatMessage.prototype.setAnonymous = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional UserLogo logo = 8;
 * @return {?proto.proto.UserLogo}
 */
proto.proto.ChatMessage.prototype.getLogo = function() {
  return /** @type{?proto.proto.UserLogo} */ (
    jspb.Message.getWrapperField(this, proto.proto.UserLogo, 8));
};


/** @param {?proto.proto.UserLogo|undefined} value */
proto.proto.ChatMessage.prototype.setLogo = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.ChatMessage.prototype.clearLogo = function() {
  this.setLogo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChatMessage.prototype.hasLogo = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TxEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TxEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TxEnum.displayName = 'proto.proto.TxEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TxEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TxEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TxEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TxEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TxEnum}
 */
proto.proto.TxEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TxEnum;
  return proto.proto.TxEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TxEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TxEnum}
 */
proto.proto.TxEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TxEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TxEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TxEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TxEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.proto.TxEnum.Status = {
  PENDING: 0,
  WITHHELD: 1,
  COMPLETED: 2,
  REFUNDED: 3,
  DEDUCTED: 4
};

/**
 * @enum {number}
 */
proto.proto.TxEnum.Reason = {
  NONE: 0,
  PLAN_CREATION: 1,
  POST_CREATION: 2,
  POST_RENEWAL: 8,
  STAKE: 3,
  CHARGE: 5,
  TIPS: 4,
  PURCHASE: 6,
  CASH_OUT: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.EventState.displayName = 'proto.proto.EventState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EventState.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EventState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EventState}
 */
proto.proto.EventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EventState;
  return proto.proto.EventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EventState}
 */
proto.proto.EventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.proto.EventState.Enum = {
  SCHEDULED: 0,
  LOCKED: 1,
  STARTED: 2,
  ENDED: 3
};

/**
 * @enum {number}
 */
proto.proto.PostType = {
  POST_TYPE: 0,
  CHAT: 1,
  SHARE: 2,
  LIVE: 3,
  AMA: 4,
  DEBATE: 5,
  DISCUSS: 6,
  ADULT: 10,
  OFFER_OPINION: 40,
  OFFER_ADVICE: 41,
  OFFER_MENTOR: 42,
  SEEK_OPINION: 50,
  SEEK_ADVICE: 51,
  SEEK_MENTOR: 52,
  ACTIVITY_MEETUP: 60,
  EVENT_MEETUP: 61
};

/**
 * @enum {number}
 */
proto.proto.PrivacyOpt = {
  PRIVATE: 0,
  CONNECTION: 1,
  COMMON: 2,
  PUBLIC: 3
};

/**
 * @enum {number}
 */
proto.proto.NotificationType = {
  ANNOUNCEMENT: 0,
  NEW_CONNECTION: 1,
  NEW_PLAN_INVITE: 2,
  NEW_EVENT_INVITE: 3,
  EVENT_UPDATED: 20,
  EVENT_RESCHEDULED: 21,
  EVENT_VERIFIED: 25,
  EVENT_CANCELLED: 27,
  EVENT_ENDED: 30,
  PLAN_GOAL_EVENT_ADDED: 40,
  PLAN_UPDATE: 41
};

/**
 * @enum {number}
 */
proto.proto.Charge = {
  CHARGE: 0,
  POST_CREATION: 1,
  POST_PAYMENT_ADDON: 2,
  POST_RENEWAL_ADDON: 3,
  POST_MEETUP_ADDON: 4,
  PLAN_CREATION: 10,
  PLAN_TRIAL_MEETUP_ADDON: 11
};

goog.object.extend(exports, proto.proto);
